/*
 * Copyright (c) 2018, Neotys
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Neotys nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL NEOTYS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.jenkinsci.plugins.neoload.integration;

import java.util.logging.Logger;

import hudson.model.Action;
import hudson.model.Run;
import org.jenkinsci.plugins.neoload.integration.supporting.NeoLoadPluginOptions;
import org.jenkinsci.plugins.neoload.integration.supporting.PluginUtils;

import hudson.model.AbstractBuild;
import hudson.model.Run.Artifact;

/**
 * This class integrates with the side panel of the specific run of a job. The side panel consists of the navigation links on the left.
 * <p>
 * Listens for the AbstractBuild so it can be referenced later.
 */
public class NeoResultsAction implements Action {

	/**
	 * This tag is found in certain pages generated by NeoLoad.
	 */
	public static final String TAG_HTML_GENERATED_BY_NEOLOAD = "#HTML Report Generated by NeoLoad#";

	/**
	 * This is added to a file to mark whether the styles have been applied or not.
	 */
	static final String COMMENT_APPLIED_STYLE = "<!-- NeoLoad Jenkins plugin applied style -->";

	/**
	 * This is added to a file to mark the date and time the file was processed. It also serves to tell us that the custom styles were applied.
	 */
	static final String COMMENT_APPLIED_FOR_BUILD_PART1 = "<!-- PROCESSED DURING BUILD: ";

	/**
	 * This is added to a file to mark the date and time the file was processed.
	 */
	static final String COMMENT_APPLIED_FOR_BUILD_PART2 = " -->";

	/**
	 * This is added to a file to mark whether the styles have been applied or not.
	 */
	private static final String COMMENT_CSS_APPLIED_STYLE = "/* NeoLoad Jenkins plugin applied style */";

	/**
	 * The current build.
	 */
	private final AbstractBuild<?, ?> build;

	/**
	 * Or the current Run
	 */
	private final Run<?, ?> run;
	private final NeoLoadPluginOptions npo;
	private transient Run runTr;

	/**
	 * True if the report file is found without any issues. This allows us to only show the link when the report file is found.
	 */
	private Artifact reportHTMLArtifactCache = null;


	private final String storedXmlReportPath;
	private final String storedHtmlReportPath;
	/**
	 * Log various messages.
	 */
	private static final Logger LOGGER = Logger.getLogger(NeoResultsAction.class.getName());

	/**
	 * @param target
	 */
	@Deprecated
	NeoResultsAction(final AbstractBuild<?, ?> target, final String xmlReportPath, final String htmlReportPath) {
		super();
		this.build = target;
		this.run = null;
		this.storedXmlReportPath = xmlReportPath;
		this.storedHtmlReportPath = htmlReportPath;
		this.npo = null;
	}

	/**
	 * @param target
	 */
	NeoResultsAction(final AbstractBuild<?, ?> target, NeoLoadPluginOptions npo) {
		super();
		this.build = target;
		this.run = null;
		this.storedXmlReportPath = npo.getXMLReportArtifactPath();
		this.storedHtmlReportPath = npo.getHTMLReportArtifactPath();
		this.npo = npo;
	}

	private Artifact findHtmlReportArtifact() {
		if (build != null) {
			return PluginUtils.findArtifact(PluginUtils.getHTMLReportPaths(build, getStoredHtmlReportPath()), build);
		}
		if (run != null){
			return PluginUtils.findArtifact(PluginUtils.getHTMLReportPaths( run, getStoredHtmlReportPath()), run);
		}
		return null;
	}

	public NeoResultsAction(Run<?, ?> run, final NeoLoadPluginOptions npo) {
		this.run = run;
		this.build = null;
		this.storedXmlReportPath = npo.getXMLReportArtifactPath();
		this.storedHtmlReportPath = npo.getHTMLReportArtifactPath();
		this.npo = npo;
	}

	/**
	 * Allows access to sidepanel.jelly from index.jelly.
	 *
	 * @return
	 */
	public Run<?, ?> getBuild() {
		if (build != null){
			return build;
		}
		return run;
	}

	private Artifact getReportArtifact() {
		if (reportHTMLArtifactCache == null) {
			reportHTMLArtifactCache = findHtmlReportArtifact();
		}
		return reportHTMLArtifactCache;
	}

	public String getDisplayName() {

		if (getReportArtifact() == null) {
			return null;
		} else {
			return "Performance Result";
		}
	}

	public String getIconFileName() {

		if (getReportArtifact() == null) {
			return null;
		} else {
			return "/plugin/neoload-jenkins-plugin/images/logo48.png";
		}
	}

	public String getUrlName() {
		if (getReportArtifact() == null) {
			return null;
		} else {
			return "neoload-report";
		}
	}

	public String getHtmlReportFilePath() {
		if (getReportArtifact() == null) {
			return null;
		}
		return getReportArtifact().getHref();
	}

	public String getStoredXmlReportPath() {
		return storedXmlReportPath;
	}

	public String getStoredHtmlReportPath() {
		return storedHtmlReportPath;
	}

	//@Override
	public void onAttached(Run<?, ?> r) {
		runTr = r;
	}

	//@Override
	public void onLoad(Run<?, ?> r) {
		runTr = r;
	}

	public Run getRunTr() {
		return runTr;
	}


	public NeoLoadPluginOptions getNpo() {
		return npo;
	}
}
